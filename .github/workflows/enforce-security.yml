name: Enforce Security Requirements

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Security Gate - Environment Validation
      run: |
        echo "🔒 Security Gate: Environment Validation"
        # Test that build fails without environment variables
        if npm run build:unsafe 2>/dev/null; then
          echo "❌ SECURITY FAILURE: Build should fail without environment variables"
          echo "🚨 Environment validation is not working properly"
          exit 1
        else
          echo "✅ SECURITY PASS: Build correctly fails without environment variables"
        fi

    - name: Security Gate - Dependency Vulnerabilities
      run: |
        echo "🔒 Security Gate: Dependency Scanning"
        # This will fail the job if high/critical vulnerabilities are found
        # Allow moderate vulnerabilities for development dependencies
        if ! npm audit --audit-level=high; then
          echo "❌ SECURITY FAILURE: High/critical vulnerabilities found"
          exit 1
        fi
        echo "✅ SECURITY PASS: No high/critical vulnerabilities found"
        echo "ℹ️  Note: Moderate vulnerabilities in development dependencies are acceptable"

    - name: Security Gate - Secret Detection
      run: |
        echo "🔒 Security Gate: Secret Detection"

        # Check for obvious credential patterns in source code
        echo "Scanning for hardcoded credentials..."

        secret_found=false

        # Check for hardcoded passwords
        if grep -r -i "password\s*=" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/ 2>/dev/null; then
          echo "❌ SECURITY FAILURE: Found hardcoded password references"
          secret_found=true
        fi

        # Check for hardcoded API keys
        if grep -r -i "api.*key\s*=" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/ 2>/dev/null; then
          echo "❌ SECURITY FAILURE: Found hardcoded API key references"
          secret_found=true
        fi

        # Check for potential JWT tokens (excluding test files)
        if grep -r "eyJ[A-Za-z0-9-_=]*\." --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/ 2>/dev/null | grep -v -i test | grep -v -i mock | grep -v -i spec; then
          echo "❌ SECURITY FAILURE: Found potential hardcoded JWT tokens"
          secret_found=true
        fi

        # Check for URLs with embedded credentials
        if grep -r "https://[^/]*:[^/]*@" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/ 2>/dev/null; then
          echo "❌ SECURITY FAILURE: Found URLs with embedded credentials"
          secret_found=true
        fi

        if [ "$secret_found" = true ]; then
          echo "🚨 SECURITY GATE FAILED: Hardcoded credentials detected"
          echo "🔧 Fix required: Remove hardcoded credentials and use environment variables"
          exit 1
        fi

        echo "✅ SECURITY PASS: No hardcoded credentials detected"

    - name: Security Gate - Environment Variable Patterns
      run: |
        echo "🔒 Security Gate: Environment Variable Patterns"

        # Check for dangerous fallback patterns
        if grep -r "process\.env\.[A-Z_]*.*||" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" src/ 2>/dev/null | grep -i -E "(key|secret|password|token)" | grep -v -i test; then
          echo "❌ SECURITY FAILURE: Found environment variables with fallback values for sensitive data"
          echo "🔧 Fix required: Remove fallback values for sensitive environment variables"
          exit 1
        fi

        echo "✅ SECURITY PASS: Environment variable patterns are secure"

    - name: Security Gate Summary
      run: |
        echo "🛡️ SECURITY GATE PASSED"
        echo "✅ Environment validation working"
        echo "✅ No high/critical vulnerabilities"
        echo "✅ No hardcoded credentials"
        echo "✅ Secure environment variable patterns"
        echo ""
        echo "🚀 Code is approved for merge"