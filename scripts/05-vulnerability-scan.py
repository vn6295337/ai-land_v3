#!/usr/bin/env python3
"""
Comprehensive vulnerability scanning script for AI Models Discovery Dashboard
Combines multiple security tools and provides unified reporting.
"""

import sys
import os
import json
import subprocess
import tempfile
from typing import Dict, List, Optional, Tuple
from pathlib import Path
from datetime import datetime


class VulnerabilityScanner:
    """Comprehensive vulnerability scanner."""

    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.results = {
            'npm_audit': {},
            'security_patterns': {},
            'dependencies': {},
            'summary': {}
        }

    def run_npm_audit(self) -> Dict:
        """Run npm audit and parse results."""
        print("🔍 Running npm audit...")

        try:
            # Run npm audit with JSON output
            result = subprocess.run(
                ['npm', 'audit', '--json'],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=60
            )

            if result.stdout:
                audit_data = json.loads(result.stdout)

                # Extract key information
                vulnerabilities = audit_data.get('vulnerabilities', {})
                metadata = audit_data.get('metadata', {})

                summary = {
                    'total_vulnerabilities': len(vulnerabilities),
                    'severity_counts': {
                        'critical': 0,
                        'high': 0,
                        'moderate': 0,
                        'low': 0
                    },
                    'vulnerable_packages': [],
                    'fixable': 0
                }

                for pkg_name, vuln_data in vulnerabilities.items():
                    severity = vuln_data.get('severity', 'unknown')
                    if severity in summary['severity_counts']:
                        summary['severity_counts'][severity] += 1

                    if vuln_data.get('fixAvailable'):
                        summary['fixable'] += 1

                    summary['vulnerable_packages'].append({
                        'name': pkg_name,
                        'severity': severity,
                        'via': vuln_data.get('via', []),
                        'fixAvailable': vuln_data.get('fixAvailable', False)
                    })

                return {
                    'status': 'success',
                    'summary': summary,
                    'metadata': metadata,
                    'raw_output': result.stdout
                }

        except (subprocess.TimeoutExpired, subprocess.CalledProcessError, json.JSONDecodeError) as e:
            return {
                'status': 'error',
                'error': str(e),
                'raw_output': result.stderr if 'result' in locals() else ''
            }

        return {'status': 'no_data'}

    def analyze_dependencies(self) -> Dict:
        """Analyze package.json for dependency risks."""
        print("📦 Analyzing dependencies...")

        package_json_path = self.project_root / 'package.json'

        if not package_json_path.exists():
            return {'status': 'error', 'error': 'package.json not found'}

        try:
            with open(package_json_path, 'r') as f:
                package_data = json.load(f)

            dependencies = package_data.get('dependencies', {})
            dev_dependencies = package_data.get('devDependencies', {})

            # Analyze dependency patterns
            risks = []

            # Check for outdated version patterns
            for dep_type, deps in [('dependencies', dependencies), ('devDependencies', dev_dependencies)]:
                for name, version in deps.items():
                    # Check for wildcard or loose version constraints
                    if version.startswith('*') or version.startswith('>'):
                        risks.append({
                            'type': 'loose_version',
                            'package': name,
                            'version': version,
                            'category': dep_type,
                            'risk': 'moderate',
                            'description': 'Loose version constraint may introduce breaking changes'
                        })

                    # Check for pre-release versions
                    if any(pre in version for pre in ['alpha', 'beta', 'rc', 'next']):
                        risks.append({
                            'type': 'prerelease',
                            'package': name,
                            'version': version,
                            'category': dep_type,
                            'risk': 'low',
                            'description': 'Pre-release version may be unstable'
                        })

            # Check total dependency count
            total_deps = len(dependencies) + len(dev_dependencies)
            if total_deps > 100:
                risks.append({
                    'type': 'dependency_bloat',
                    'count': total_deps,
                    'risk': 'moderate',
                    'description': f'High dependency count ({total_deps}) increases attack surface'
                })

            return {
                'status': 'success',
                'total_dependencies': len(dependencies),
                'total_dev_dependencies': len(dev_dependencies),
                'risks': risks,
                'package_info': {
                    'name': package_data.get('name'),
                    'version': package_data.get('version'),
                    'license': package_data.get('license')
                }
            }

        except (json.JSONDecodeError, FileNotFoundError) as e:
            return {'status': 'error', 'error': str(e)}

    def check_security_patterns(self) -> Dict:
        """Run security pattern checks."""
        print("🔒 Checking security patterns...")

        security_script = self.project_root / 'scripts/03-security-check.py'

        if not security_script.exists():
            return {'status': 'error', 'error': 'Security check script not found'}

        # Find relevant files to scan
        file_patterns = ['*.js', '*.jsx', '*.ts', '*.tsx', '*.py']
        files_to_scan = []

        for pattern in file_patterns:
            files_to_scan.extend(self.project_root.glob(f"**/{pattern}"))

        # Filter out node_modules and other unwanted directories
        files_to_scan = [
            f for f in files_to_scan
            if not any(part in str(f) for part in ['node_modules', '.git', 'dist', 'build', 'coverage'])
        ]

        if not files_to_scan:
            return {'status': 'no_files'}

        try:
            # Run security check
            cmd = ['python3', str(security_script)] + [str(f) for f in files_to_scan[:50]]  # Limit files
            result = subprocess.run(
                cmd,
                cwd=self.project_root,
                capture_output=True,
                text=True,
                timeout=120
            )

            return {
                'status': 'success',
                'exit_code': result.returncode,
                'files_scanned': len(files_to_scan[:50]),
                'output': result.stdout,
                'errors': result.stderr
            }

        except (subprocess.TimeoutExpired, subprocess.CalledProcessError) as e:
            return {'status': 'error', 'error': str(e)}

    def generate_report(self) -> str:
        """Generate comprehensive vulnerability report."""
        report = []
        report.append("# Vulnerability Scan Report")
        report.append(f"Generated: {datetime.now().isoformat()}")
        report.append(f"Project: {self.project_root.name}")
        report.append("")

        # NPM Audit Results
        npm_results = self.results.get('npm_audit', {})
        if npm_results.get('status') == 'success':
            summary = npm_results.get('summary', {})
            report.append("## NPM Audit Results")
            report.append(f"- Total vulnerabilities: {summary.get('total_vulnerabilities', 0)}")

            severity_counts = summary.get('severity_counts', {})
            for severity, count in severity_counts.items():
                if count > 0:
                    icon = "🚨" if severity in ['critical', 'high'] else "⚠️" if severity == 'moderate' else "ℹ️"
                    report.append(f"  - {icon} {severity.title()}: {count}")

            fixable = summary.get('fixable', 0)
            if fixable > 0:
                report.append(f"- Fixable vulnerabilities: {fixable}")

            report.append("")

        # Dependency Analysis
        dep_results = self.results.get('dependencies', {})
        if dep_results.get('status') == 'success':
            report.append("## Dependency Analysis")
            report.append(f"- Total dependencies: {dep_results.get('total_dependencies', 0)}")
            report.append(f"- Dev dependencies: {dep_results.get('total_dev_dependencies', 0)}")

            risks = dep_results.get('risks', [])
            if risks:
                report.append("- Dependency risks found:")
                for risk in risks:
                    risk_level = risk.get('risk', 'unknown')
                    icon = "🚨" if risk_level == 'high' else "⚠️" if risk_level == 'moderate' else "ℹ️"
                    report.append(f"  {icon} {risk.get('description', 'Unknown risk')}")

            report.append("")

        # Security Pattern Results
        security_results = self.results.get('security_patterns', {})
        if security_results.get('status') == 'success':
            report.append("## Security Pattern Analysis")
            report.append(f"- Files scanned: {security_results.get('files_scanned', 0)}")
            report.append(f"- Exit code: {security_results.get('exit_code', 'unknown')}")

            if security_results.get('exit_code') == 0:
                report.append("- ✅ No critical security issues found")
            else:
                report.append("- ⚠️ Security issues detected (check output)")

            report.append("")

        # Overall Assessment
        report.append("## Overall Risk Assessment")

        risk_score = 0
        risk_factors = []

        # Calculate risk score
        if npm_results.get('status') == 'success':
            summary = npm_results.get('summary', {})
            severity_counts = summary.get('severity_counts', {})

            risk_score += severity_counts.get('critical', 0) * 4
            risk_score += severity_counts.get('high', 0) * 3
            risk_score += severity_counts.get('moderate', 0) * 2
            risk_score += severity_counts.get('low', 0) * 1

            if severity_counts.get('critical', 0) > 0:
                risk_factors.append("Critical vulnerabilities present")
            if severity_counts.get('high', 0) > 0:
                risk_factors.append("High-severity vulnerabilities present")

        if security_results.get('exit_code', 0) != 0:
            risk_score += 5
            risk_factors.append("Security pattern violations detected")

        # Classify overall risk
        if risk_score == 0:
            risk_level = "LOW"
            risk_icon = "✅"
        elif risk_score <= 5:
            risk_level = "MODERATE"
            risk_icon = "⚠️"
        elif risk_score <= 15:
            risk_level = "HIGH"
            risk_icon = "🚨"
        else:
            risk_level = "CRITICAL"
            risk_icon = "💀"

        report.append(f"**Risk Level: {risk_icon} {risk_level}** (Score: {risk_score})")
        report.append("")

        if risk_factors:
            report.append("Risk factors:")
            for factor in risk_factors:
                report.append(f"- {factor}")
            report.append("")

        # Recommendations
        report.append("## Recommendations")

        if npm_results.get('status') == 'success':
            summary = npm_results.get('summary', {})
            fixable = summary.get('fixable', 0)
            if fixable > 0:
                report.append("- Run `npm audit fix` to resolve fixable vulnerabilities")

        if risk_score > 0:
            report.append("- Review and address all high and critical severity issues")
            report.append("- Update dependencies to latest secure versions")
            report.append("- Consider implementing additional security measures")

        report.append("- Regularly run vulnerability scans")
        report.append("- Monitor security advisories for used packages")
        report.append("- Keep dependencies up to date")

        return "\n".join(report)

    def run_scan(self) -> Dict:
        """Run complete vulnerability scan."""
        print("🚀 Starting comprehensive vulnerability scan...")
        print(f"Project root: {self.project_root}")

        # Run individual scans
        self.results['npm_audit'] = self.run_npm_audit()
        self.results['dependencies'] = self.analyze_dependencies()
        self.results['security_patterns'] = self.check_security_patterns()

        # Generate summary
        self.results['summary'] = {
            'scan_time': datetime.now().isoformat(),
            'project_path': str(self.project_root),
            'scans_completed': len([r for r in self.results.values() if isinstance(r, dict) and r.get('status') == 'success'])
        }

        return self.results


def main():
    """Main function to run vulnerability scanning."""
    if len(sys.argv) > 1:
        project_root = sys.argv[1]
    else:
        project_root = os.getcwd()

    if not os.path.exists(project_root):
        print(f"Error: Project directory '{project_root}' does not exist")
        sys.exit(1)

    scanner = VulnerabilityScanner(project_root)
    results = scanner.run_scan()

    # Generate and display report
    report = scanner.generate_report()
    print("\n" + "="*60)
    print(report)
    print("="*60)

    # Save detailed results to file
    results_file = Path(project_root) / 'vulnerability-scan-results.json'
    try:
        with open(results_file, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        print(f"\n📄 Detailed results saved to: {results_file}")
    except Exception as e:
        print(f"\n⚠️  Could not save results file: {e}")

    # Exit with appropriate code
    npm_results = results.get('npm_audit', {})
    security_results = results.get('security_patterns', {})

    # Exit with error if critical issues found
    if npm_results.get('status') == 'success':
        summary = npm_results.get('summary', {})
        severity_counts = summary.get('severity_counts', {})
        if severity_counts.get('critical', 0) > 0:
            print("\n❌ Critical vulnerabilities detected - scan failed")
            sys.exit(1)

    if security_results.get('exit_code', 0) != 0:
        print("\n❌ Security issues detected - scan failed")
        sys.exit(1)

    print("\n✅ Vulnerability scan completed successfully")
    sys.exit(0)


if __name__ == "__main__":
    main()