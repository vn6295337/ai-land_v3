File and Folder Naming Conventions Documentation

=== OVERVIEW ===

This document outlines the mandatory 2-digit serial number naming system
for all files and folders in this project.

=== FOLDER NAMING ===

Pattern: [00-99]-[descriptive-name]

Examples:
  ✅ 10-documentation
  ✅ 50-scripts
  ✅ 90-utilities
  ❌ documentation
  ❌ scripts
  ❌ 1-docs (single digit)

Standard Folders:
  10-documentation     Project docs, specs, requirements
  20-architecture      System design, blueprints, diagrams
  30-configuration     Config files, environment settings
  40-integrations      External service integrations
  50-scripts           Automation, build, deployment scripts
  60-security          Security policies, audits, compliance
  70-testing           Test suites, test data, QA materials
  80-deployment        Infrastructure, CI/CD, release configs
  90-utilities         Helper tools, utilities, misc tools

=== FILE NAMING ===

Pattern: [00-99]-[descriptive-name].[extension]

Examples:
  ✅ 01-project-overview.txt
  ✅ 02-current-state.txt
  ✅ 03-solution-approach.txt
  ❌ project-overview.txt
  ❌ api_configuration.ts
  ❌ 1-schema.json (single digit)

=== FILE EXTENSION RULES ===

Each folder type has specific allowed extensions:

Documentation (10-*): .txt, .md
Architecture (20-*):  .txt, .md, .json, .yml, .yaml
Configuration (30-*): .ts, .js, .json, .yml, .yaml, .env
Integrations (40-*):  .ts, .js, .json, .yml, .yaml
Scripts (50-*):       .py, .js, .ts, .sh, .yml, .yaml
Security (60-*):      .txt, .md, .yml, .yaml, .json
Testing (70-*):       .py, .js, .ts, .json, .yml, .yaml
Deployment (80-*):    .yml, .yaml, .json, .sh, .dockerfile
Utilities (90-*):     .py, .js, .ts, .sh, .json, .yml, .yaml

=== VALIDATION ===

Pre-commit hooks automatically validate:
- Folder naming patterns
- File naming patterns
- File extension appropriateness for folder type
- Exclusion of legacy/config files

=== BYPASSING VALIDATION ===

Emergency bypass (use sparingly):
  git commit --no-verify

=== CONFIGURATION ===

Modify rules in: 50-scripts/02-naming-config.yml

=== BENEFITS ===

1. Predictable sorting and organization
2. Scalable (up to 99 folders, 99 files each)
3. Machine-readable for automation
4. Clear visual hierarchy
5. Enforced consistency across team
